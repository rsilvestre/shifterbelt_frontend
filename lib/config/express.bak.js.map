{"version":3,"sources":["../../src/config/express.bak.js"],"names":[],"mappings":"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","file":"express.bak.js","sourcesContent":["\n/**\n * Module dependencies.\n */\n\nvar express = require('express');\nvar session = require('express-session');\nvar compression = require('compression');\nvar morgan = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar cookieSession = require('cookie-session');\nvar bodyParser = require('body-parser');\nvar methodOverride = require('method-override');\nvar csrf = require('csurf');\nvar multer = require('multer');\nvar swig = require('swig');\n\nvar mongoStore = require('connect-mongo')(session);\nvar flash = require('connect-flash');\nvar winston = require('winston');\nvar helpers = require('view-helpers');\nvar config = require('config');\nvar pkg = require('../package.json');\n\nvar env = process.env.NODE_ENV || 'development';\n\n/**\n * Expose\n */\n\nmodule.exports = function (app, passport) {\n\n  // Compression middleware (should be placed before express.static)\n  app.use(compression({\n    threshold: 512\n  }));\n\n  // Static files middleware\n  app.use(express.static(config.root + '/public'));\n\n  // Use winston on production\n  var log;\n  if (env !== 'development') {\n    log = {\n      stream: {\n        write: function (message, encoding) {\n          winston.info(message);\n        }\n      }\n    };\n  } else {\n    log = 'dev';\n  }\n\n  // Don't log during tests\n  // Logging middleware\n  if (env !== 'test') app.use(morgan(log));\n\n  // Swig templating engine settings\n  if (env === 'development' || env === 'test') {\n    swig.setDefaults({\n      cache: false\n    });\n  }\n\n  // set views path, template engine and default layout\n  app.engine('html', swig.renderFile);\n  app.set('views', config.root + '/app/views');\n  app.set('view engine', 'html');\n\n  // expose package.json to views\n  app.use(function (req, res, next) {\n    res.locals.pkg = pkg;\n    res.locals.env = env;\n    next();\n  });\n\n  // bodyParser should be above methodOverride\n  app.use(bodyParser.json());\n  app.use(bodyParser.urlencoded({ extended: true }));\n  app.use(multer());\n  app.use(methodOverride(function (req, res) {\n    if (req.body && typeof req.body === 'object' && '_method' in req.body) {\n      // look in urlencoded POST bodies and delete it\n      var method = req.body._method;\n      delete req.body._method;\n      return method;\n    }\n  }));\n\n  // CookieParser should be above session\n  app.use(cookieParser());\n  app.use(cookieSession({ secret: 'secret' }));\n  app.use(session({\n    resave: true,\n    saveUninitialized: true,\n    secret: pkg.name,\n    store: new mongoStore({\n      url: config.db,\n      collection : 'sessions'\n    })\n  }));\n\n  // use passport session\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // connect flash for flash messages - should be declared after sessions\n  app.use(flash());\n\n  // should be declared after session and flash\n  app.use(helpers(pkg.name));\n\n  // adds CSRF support\n  if (process.env.NODE_ENV !== 'test') {\n    app.use(csrf());\n\n    // This could be moved to view-helpers :-)\n    app.use(function (req, res, next) {\n      res.locals.csrf_token = req.csrfToken();\n      next();\n    });\n  }\n};\n"]}